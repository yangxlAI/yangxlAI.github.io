<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="cn"><generator uri="https://jekyllrb.com/" version="4.3.4">Jekyll</generator><link href="https://yangxlai.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://yangxlai.github.io/" rel="alternate" type="text/html" hreflang="cn"/><updated>2024-12-12T11:30:49+00:00</updated><id>https://yangxlai.github.io/feed.xml</id><title type="html">杨秀隆在CCNU</title><subtitle>A simple, whitespace theme for academics. Based on [*folio](https://github.com/bogoli/-folio) design. </subtitle><entry><title type="html">Docker如何用上宿主机的Clash代理</title><link href="https://yangxlai.github.io/blog/2024/docker%E5%86%85%E9%83%A8%E4%BD%BF%E7%94%A8%E5%AE%BF%E4%B8%BB%E6%9C%BA%E4%BB%A3%E7%90%86/" rel="alternate" type="text/html" title="Docker如何用上宿主机的Clash代理"/><published>2024-11-15T16:40:16+00:00</published><updated>2024-11-15T16:40:16+00:00</updated><id>https://yangxlai.github.io/blog/2024/docker%E5%86%85%E9%83%A8%E4%BD%BF%E7%94%A8%E5%AE%BF%E4%B8%BB%E6%9C%BA%E4%BB%A3%E7%90%86</id><content type="html" xml:base="https://yangxlai.github.io/blog/2024/docker%E5%86%85%E9%83%A8%E4%BD%BF%E7%94%A8%E5%AE%BF%E4%B8%BB%E6%9C%BA%E4%BB%A3%E7%90%86/"><![CDATA[<p>来源 <a href="https://williamlfang.github.io/2024-03-28-docker-%E4%BD%BF%E7%94%A8-host-%E4%BB%A3%E7%90%86/">https://williamlfang.github.io/2024-03-28-docker-%E4%BD%BF%E7%94%A8-host-%E4%BB%A3%E7%90%86/</a></p> <h1 id="问题描述">问题描述：</h1> <p>al-folio 学术主页访问谷歌学术， 没有代理会报错</p> <p>在 docker-compose.yml 文件里进行修改</p> <p>加入</p> <p>network_mode: host 和代理</p> <p>如下：</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>version: "3"
# this file uses prebuilt image in dockerhub
services:
  jekyll:
    image: amirpourmand/al-folio:v0.12.0
    build: .
    network_mode: host
    ports:
      - 8080:8080
      - 35729:35729
    volumes:
      - .:/srv/jekyll
    environment:
      - HTTP_PROXY=http://127.0.0.1:7897
      - HTTPS_PROXY=http://127.0.0.1:7897
      - NO_PROXY=localhost,127.0.0.1
</code></pre></div></div>]]></content><author><name></name></author><category term="工具"/><category term="虚拟机,"/><category term="Docker"/><summary type="html"><![CDATA[Docker (及 docker compose)使用 宿主机 Clash]]></summary></entry><entry><title type="html">独显用于深度学习运算，核显用于屏幕显示</title><link href="https://yangxlai.github.io/blog/2024/%E7%8B%AC%E6%98%BE%E7%94%A8%E4%BA%8E%E8%BF%90%E7%AE%97%E6%A0%B8%E6%98%BE%E7%94%A8%E4%BA%8E%E5%B1%8F%E5%B9%95%E6%98%BE%E7%A4%BA/" rel="alternate" type="text/html" title="独显用于深度学习运算，核显用于屏幕显示"/><published>2024-11-14T16:40:16+00:00</published><updated>2024-11-14T16:40:16+00:00</updated><id>https://yangxlai.github.io/blog/2024/%E7%8B%AC%E6%98%BE%E7%94%A8%E4%BA%8E%E8%BF%90%E7%AE%97%E6%A0%B8%E6%98%BE%E7%94%A8%E4%BA%8E%E5%B1%8F%E5%B9%95%E6%98%BE%E7%A4%BA</id><content type="html" xml:base="https://yangxlai.github.io/blog/2024/%E7%8B%AC%E6%98%BE%E7%94%A8%E4%BA%8E%E8%BF%90%E7%AE%97%E6%A0%B8%E6%98%BE%E7%94%A8%E4%BA%8E%E5%B1%8F%E5%B9%95%E6%98%BE%E7%A4%BA/"><![CDATA[<p>来源 <a href="https://blog.csdn.net/qq_41983842/article/details/129131044">https://blog.csdn.net/qq_41983842/article/details/129131044</a></p> <h1 id="问题描述">问题描述</h1> <p>Nvidia显卡用于显示， xorg/firefox等会占用两三百兆显存， 以及 在低功率地运行显卡</p> <p>一直尝试切换到 集成显卡用于显示， 然而一直不成功。</p> <p>本文是最接近成功的一次， 主要是解释了 nvidia-settings 没有 prime profiles选项的问题。</p> <p>即</p> <ol> <li>prime-select query 可看到通常是on-demand混合模式，</li> <li>使用 sudo prime-select intel 切换成集成显卡显示的模式， 将 hdmi/DP反正就是显示器 接到 集显接口上。</li> <li>重启就可以看到 nvidia-settings 出现 prime profiles选项了， 但 nvidia-smi 显示无法连接显卡。</li> <li>在nvidia-settings的prime profiles换成 on demand</li> <li>显示器保持在集显接口不变， 重启</li> </ol> <p>我在第五步挂了， ubuntu 桌面无法启动， 光标闪， 有一次又显示 hdaudio2那个错误， 没解决。</p> <p>安全模式能正常显示~~~</p> <p>所以昨天写的是 （五笔输入也坏了）：</p> <p>almost done</p> <p>still fail</p> <p>explain something</p>]]></content><author><name></name></author><category term="工具"/><category term="ubuntu"/><summary type="html"><![CDATA[独显用于深度学习运算，核显用于屏幕显示]]></summary></entry><entry><title type="html">关于英语的乱想法</title><link href="https://yangxlai.github.io/blog/2024/ThoughtsOnEnglish/" rel="alternate" type="text/html" title="关于英语的乱想法"/><published>2024-09-27T11:59:00+00:00</published><updated>2024-09-27T11:59:00+00:00</updated><id>https://yangxlai.github.io/blog/2024/ThoughtsOnEnglish</id><content type="html" xml:base="https://yangxlai.github.io/blog/2024/ThoughtsOnEnglish/"><![CDATA[<p>经验有限， 简单、不成熟的想法</p> <p>单项每天大概15分钟的练习， 好过过于费时不去做。</p> <p>中国人的英语听说读写里， 听说写确实都弱很多（me too）</p> <h2 id="听力">听力</h2> <p>听写其实资源很多、也好进行， 坚持比如每天或一周五天各15-20分钟， 听写一分钟的材料， 不熟练的坚持听写完1分钟的材料可能要花半小时， 心都累了。不如12-15分钟，能听写多少是多少， 再来3、5分钟对比，哪里没听懂。 能看到自己的进步， 比如 从慢速写三五句，到常速写完。</p> <h2 id="口语">口语</h2> <p>口语，以前难， 现在有大模型了， 还可以对话和较好地评判了。</p> <p>发音方面 英语流利说 是不错。</p> <p>练口语不一定看重发音， 印度人平均口音也很重，不影响他们说得流畅， data mining 发成 “打他money” 影响不大。</p> <ol> <li>抽签做题， 让大模型随机出个话题（读题或听题）， 直接英语口语即兴回答</li> <li>一开始，可能 10秒钟磕磕绊绊凑不出一句话， 那就去写稿， 写英语的稿子， 然后用大模型改掉语病和错误用词， 以及要求口语化。</li> <li>背稿、读出来。</li> <li>翻译，看中文，逐渐提升语感、反应速度。</li> <li>即兴回答要多练， 具体话题范围不定，大概就是生活化、专业化。有时可能不只是英语答不上来，而是用中文也答不上来， 所以得多尝试各种话题。比如我喜欢宅，那运动、风景、旅游甚至家乡话题，我用中文都说不上来。</li> </ol> <p>可用的app， 文心一言（百度的）和豆包（字节的？）好像都支持口语问答。</p> <h2 id="写作">写作</h2> <p>原则上和口语类似， 而且基本只用考虑学术写作， 日常英语写作比如写邮件用大模型就很方便了。</p> <p>学术写作总体</p> <ol> <li>全文结构。 包括不同学科方向、期刊会议的写作风格， 比如一般人工智能顶会新方法论文就是<code class="language-plaintext highlighter-rouge">导论-(相关研究)-方法-实验-讨论和结论</code>， 但生物信息学有些方法理论不是重点， 放后面或就是放附录。</li> <li>故事逻辑。 导论</li> <li>细节句子。</li> </ol> <h3 id="阅读">阅读</h3> <p>读论文 略读、精读， 各路大神的说法都差不多 <a href="https://www.bilibili.com/video/BV1H44y1t75x/">李沐：如何读论文</a>。 不过我觉得大神的经验可能没考虑论文还没读超过3、5篇的新手？</p> <p>GRE的阅读大概是词汇量因素</p>]]></content><author><name></name></author><category term="其他"/><category term="其他"/><summary type="html"><![CDATA[英语听说读写常规化锻炼]]></summary></entry><entry><title type="html">Docker如何用上Clash代理</title><link href="https://yangxlai.github.io/blog/2024/docker%E4%BB%A3%E7%90%86/" rel="alternate" type="text/html" title="Docker如何用上Clash代理"/><published>2024-09-25T16:40:16+00:00</published><updated>2024-09-25T16:40:16+00:00</updated><id>https://yangxlai.github.io/blog/2024/docker%E4%BB%A3%E7%90%86</id><content type="html" xml:base="https://yangxlai.github.io/blog/2024/docker%E4%BB%A3%E7%90%86/"><![CDATA[<p>来源 <a href="https://blog.haohtml.com/archives/31298">https://blog.haohtml.com/archives/31298</a></p> <p>通过直接设置 http_proxy 和 https_proxy 这两个环境变量是不可行的</p> <ol> <li>设置docker服务代理</li> </ol> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sudo mkdir -p /etc/systemd/system/docker.service.d/
sudo vim /etc/systemd/system/docker.service.d/http-proxy.conf
</code></pre></div></div> <p>将以下内容写入 http-proxy.conf 文件</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[Service]
Environment="HTTP_PROXY=http://127.0.0.1:7897"
Environment="HTTPS_PROXY=http://127.0.0.1:7897"
Environment="ALL_PROXY=socks5://127.0.0.1:7897"
Environment="NO_PROXY=localhost,127.0.0.1,docker-registry.example.com,.corp,.docker.io,.docker.com"
</code></pre></div></div> <p>上面代理地址是本机开启的代理服务监听端口，如果代理服务在局域网内的其它机器上的话，需要更换为其 ip 地址和端口号。环境变量 NO_PROXY 表示不使用代理的域名或IP。</p> <ol> <li>重启 docker 服务</li> </ol> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>systemctl daemon-reload
systemctl restart docker
</code></pre></div></div> <ol> <li>验证</li> </ol> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>root@ubuntu:~# systemctl show --property=Environment docker
Environment=HTTP_PROXY=http://127.0.0.1:7890 HTTPS_PROXY=http://127.0.0.1:7890 ALL_PROXY=socks5://127.0.0.1:7890 NO_PROXY=localhost,127.0.0.1,docker-registry.example.com,.corp,.docker.io,.docker.com
</code></pre></div></div>]]></content><author><name></name></author><category term="工具"/><category term="虚拟机,"/><category term="Docker"/><summary type="html"><![CDATA[Docker (及 docker compose)使用 Clash 下载镜像 pull]]></summary></entry><entry><title type="html">Ollama使用遇到的问题</title><link href="https://yangxlai.github.io/blog/2024/Ollama%E4%BD%BF%E7%94%A8/" rel="alternate" type="text/html" title="Ollama使用遇到的问题"/><published>2024-07-20T12:57:00+00:00</published><updated>2024-07-20T12:57:00+00:00</updated><id>https://yangxlai.github.io/blog/2024/Ollama%E4%BD%BF%E7%94%A8</id><content type="html" xml:base="https://yangxlai.github.io/blog/2024/Ollama%E4%BD%BF%E7%94%A8/"><![CDATA[<h1 id="ollama-和-open-webui-的连接">Ollama 和 Open-webui 的连接</h1> <p>Open-webui 使用 docker， ollama 不使用 docker</p> <p>在Admin Panel的Settings-Ollama API 里 填入 <code class="language-plaintext highlighter-rouge">http://host.docker.internal:11434</code> (注： 不一定成功)</p> <p>来源 https://github.com/open-webui/open-webui/issues/377#issuecomment-1878085031</p> <h1 id="gguf">gguf</h1> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>python convert_hf_to_gguf.py /root/autodl-tmp/models/Llama3-8B-Chinese-Chat-merged --outfile /root/autodl-tmp/models/Llama3-8B-Chinese-Chat-GGUF/Llama3-8B-Chinese-Chat-q8_0-v1.gguf --outtype q8_0
./llama-quantize ./新模型路径/新模型名.gguf  ./输出路径/4位gguf格式文件名.gguf Q4_K_M 采用4位  如果8位就Q8_K_M
</code></pre></div></div>]]></content><author><name></name></author><category term="NLP"/><category term="NLP"/><summary type="html"><![CDATA[如题]]></summary></entry><entry><title type="html">自然语言学习简要路径</title><link href="https://yangxlai.github.io/blog/2024/NLP-study/" rel="alternate" type="text/html" title="自然语言学习简要路径"/><published>2024-07-08T12:57:00+00:00</published><updated>2024-07-08T12:57:00+00:00</updated><id>https://yangxlai.github.io/blog/2024/NLP-study</id><content type="html" xml:base="https://yangxlai.github.io/blog/2024/NLP-study/"><![CDATA[<p>大模型相关的 <a href="https://github.com/Azyka/LLM-Learning/tree/main">LLM-learning</a></p> <p>再来点个人建议， 指出几个资源、列举几个方向的几篇论文</p> <h2 id="nlp入门课程">NLP入门课程</h2> <p>如台大李宏毅、 西湖大学张岳(B站有)</p> <p>大模型年代，可能会倾向于先学大模型知识</p> <h2 id="大模型方面">大模型方面</h2> <p>课程待找</p> <p>视频资源 <a href="https://space.bilibili.com/1567748478/channel/collectiondetail?sid=32744">跟李沐学AI 合集 AI论文精读</a></p> <p>NLP 必读论文 对应视频：</p> <ul> <li><a href="https://www.bilibili.com/video/BV1pu411o7BE/">Transformer</a></li> <li>关键的 Residual 残差网络 <a href="https://www.bilibili.com/video/BV1Fb4y1h73E/">部分1</a> 和 <a href="https://www.bilibili.com/video/BV1P3411y7nn/">部分2</a>。</li> <li>重要方向 <a href="https://www.bilibili.com/video/BV1PL411M7eQ/">BERT</a></li> <li>大语言模型的 <a href="https://www.bilibili.com/video/BV1AF411b7xQ/">GPT 1 2 3</a></li> <li><a href="https://www.bilibili.com/video/BV1t8411e7Ug/">Chain of thoughts</a></li> <li>ChatGPT背后的技术 <a href="https://www.bilibili.com/video/BV1hd4y187CR/">InstructGPT</a></li> <li>文本-图像多模态的基础 <a href="https://www.bilibili.com/video/BV1SL4y1s7LQ/">CLIP</a></li> <li>微调/精调 <a href="https://www.bilibili.com/video/BV1tthPeFEWb/">LoRA</a></li> </ul> <h1 id="论文主要划分">论文主要划分</h1> <h2 id="基础结构">基础结构</h2> <ul> <li>Attention is all you need</li> <li>ResNet</li> <li>BERT</li> <li>GPT 1 2 3</li> <li>T5 其实就是 Transformer</li> <li>GLM General Language Model Pretraining其实就是某种 Transformer（</li> <li>ViT Transformer在图像</li> <li>RWKV?</li> <li>Mamba?</li> </ul> <h2 id="大模型推理">大模型推理</h2> <ul> <li>Chain of thoughts</li> <li>self-consistency CoT</li> <li>Let’s think step by step(zero-shot reasoner)</li> <li>等等</li> <li>列太多就成 awesome-XXX 了</li> </ul> <h2 id="微调-peft">微调 PEFT</h2> <p>parameter effecient fine tuning</p> <p>主要是 LoRA, Adapter 和 其他</p> <h3 id="lora">LoRA</h3> <h3 id="adapter">Adapter</h3>]]></content><author><name></name></author><category term="NLP"/><category term="NLP"/><summary type="html"><![CDATA[如题]]></summary></entry><entry><title type="html">Docker因Windows Hyper-V而启动失败</title><link href="https://yangxlai.github.io/blog/2024/docker%E6%8A%A5%E9%94%99windows-hyper-V/" rel="alternate" type="text/html" title="Docker因Windows Hyper-V而启动失败"/><published>2024-06-06T16:40:16+00:00</published><updated>2024-06-06T16:40:16+00:00</updated><id>https://yangxlai.github.io/blog/2024/docker%E6%8A%A5%E9%94%99windows%20hyper-V</id><content type="html" xml:base="https://yangxlai.github.io/blog/2024/docker%E6%8A%A5%E9%94%99windows-hyper-V/"><![CDATA[<p>之前windows 10 安装了 docker desktop 成功， 也确实能用</p> <p>但是， 安装了一下腾讯应用宝， 那家伙老提出 虚拟化影响，让我关掉， 我同意了。</p> <p>于是 docker desktop启动就失败，大概就是说 找不到 unable to detect Windows Hyper-v/hypervisor。还给了个官方链接， 结果没解决。</p> <p><img src="/assets/images/20240606-docker_miss_hyperv.png" alt="alt text"/></p> <p>于是 我经历一番周折， 终于打通了。</p> <p>简单总结：</p> <ol> <li>这台三星的 BIOS 里 VT 默认支持、没有启动/关闭，改不了</li> <li>功能/feature里 虚拟机平台已经勾选， 也没用</li> <li>功能/feature里 Hyper-V 没有， 需要添加， 家庭版默认没有（或者因为腾讯那个应用宝删了）</li> <li>最后还要设置一下什么东东</li> <li>完成</li> </ol> <p>最后发现 docker Hyper V问题解决<sup id="fnref:1" role="doc-noteref"><a href="#fn:1" class="footnote" rel="footnote">1</a></sup> 这篇很完整了， 但最后有错误， 并且 安装 Hyper-V的命令行文件要关注公众号去领取， 比较坑。</p> <h1 id="bios-enable">BIOS enable</h1> <p>各平台的 BIOS 对 VT Virtualization technology/x 的支持方式不同。</p> <p>幸运的是， 我用的三星 Samsung 电脑默认支持， 不幸的是， 也就是不能改， 我白白重启好几次， 里面就写了个 CPU VT-x support</p> <h1 id="windows功能-虚拟机平台">Windows功能 虚拟机平台</h1> <p>控制面板 —- <code class="language-plaintext highlighter-rouge">启用或关闭Windows功能</code> 即 add or remove Windows features (特征翻译成了功能， 移除翻译成关闭， 或者说 英语单词用得不太贴切， 虽然是他们母语。) —- 找 虚拟机平台 英语 Virtual Machine Platform</p> <p>幸运的是，我的仍然已经勾选， 不知道怎么办</p> <p><img src="/assets/images/20240606-addremWinFeat.png" alt="image-20240606164009400"/></p> <h1 id="windows功能-hyper-v">Windows功能 Hyper-V</h1> <p>又搜了一圈， 看到说 Hyper-V 要勾选上， 终于看到一个 电脑上缺的玩意， 官方说 家庭版没有， 但总有人解决问题的。</p> <p><img src="/assets/images/20240606-hyperv.png" alt="image-20240606164403080"/></p> <p>见链接 [Win10家庭中文版安装Hyper-V]<sup id="fnref:2" role="doc-noteref"><a href="#fn:2" class="footnote" rel="footnote">2</a></sup></p> <ol> <li> <p>创建 hyperv.cmd 文件，添加以下内容。 <strong>注意</strong> 后缀名是 .cmd，创建成hyperv.cmd.txt 文件 就没法直接运行了 。</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code> pushd "%~dp0"
 dir /b %SystemRoot%\servicing\Packages\*Hyper-V*.mum &gt;hyper-v.txt
 for /f %%i in ('findstr /i . hyper-v.txt 2^&gt;nul') do dism /online /norestart /add-package:"%SystemRoot%\servicing\Packages\%%i"
 del hyper-v.txt
 Dism /online /enable-feature /featurename:Microsoft-Hyper-V-All /LimitAccess /ALL
</code></pre></div> </div> </li> <li> <p>右键菜单，以管理员身份运行 – 另外，你也可以在 cmd 里将上面代码逐行运行，不用建文件。</p> </li> <li> <p>系统开始处理， 下载若干文件， 初看 好像反复下同一个文件， 其实是在下多个文件， 下多久看网速， 我和评论区说的都是两三分钟。 最后安装完成后， 问你是否重启（英文），反正就是问你 Y还是 n。</p> </li> </ol> <p>重启后，再次打开 <code class="language-plaintext highlighter-rouge">启用或关闭Windows功能</code> 就能看到 上图里的 Hyper-V 了，默认也已勾选。</p> <p>我以为完成了， 结果还是没有~</p> <h1 id="cmd命令设置-和-重启">cmd命令设置 和 重启。</h1> <p>windows 打开 command prompt 即 cmd 方法：</p> <p>搜索框 - 输入 cmd - 命令行提示符/command prompt， 右键 以管理员运行</p> <p><img src="/assets/images/20240606-search.png" alt="image-20240606165940030"/></p> <p>设置Hyper-V:</p> <ol> <li>netsh winsock reset // 执行完该命令一定要重启电脑再去执行下面的命令</li> <li>bcdedit /set hypervisorlaunchtype auto // 又要重启一次~~~才终于成功。</li> </ol> <p>知乎回答里最后给的 Enable-WindowsOptionalFeature -Online -FeatureName Microsoft-Hyper-V -All bcdedit /set hypervisorlaunchtype auto 是有问题的， 把powershell 和 command prompt 混在一起了。</p> <h1 id="本文参考文献不全">本文参考文献（不全）</h1> <div class="footnotes" role="doc-endnotes"> <ol> <li id="fn:1" role="doc-endnote"> <p><a href="https://www.zhihu.com/question/67882155/answer/2903900947">Docker 的 Hyper-V问题 知乎回答</a> <a href="#fnref:1" class="reversefootnote" role="doc-backlink">&#8617;</a></p> </li> <li id="fn:2" role="doc-endnote"> <p><a href="https://zhuanlan.zhihu.com/p/356396288">Win10家庭中文版安装Hyper-V</a> <a href="#fnref:2" class="reversefootnote" role="doc-backlink">&#8617;</a></p> </li> </ol> </div>]]></content><author><name></name></author><category term="工具"/><category term="虚拟机,"/><category term="Docker"/><summary type="html"><![CDATA[Docker 如何重启 Hyper-V， windows家庭版]]></summary></entry><entry><title type="html">课程大纲与工作技能评分论文与数据</title><link href="https://yangxlai.github.io/blog/2024/US-DWA-dataset/" rel="alternate" type="text/html" title="课程大纲与工作技能评分论文与数据"/><published>2024-06-06T12:57:00+00:00</published><updated>2024-06-06T12:57:00+00:00</updated><id>https://yangxlai.github.io/blog/2024/US-DWA-dataset</id><content type="html" xml:base="https://yangxlai.github.io/blog/2024/US-DWA-dataset/"><![CDATA[<p>论文： A national longitudinal dataset of skills taught in U.S. higher education curricula<br/> 链接： https://arxiv.org/abs/2404.13163 <br/> 数据(18G)链接： https://figshare.com/articles/dataset/A_national_longitudinal_dataset_of_skills_taught_in_U_S_higher_education_curricula/25632429</p> <p>研究团队通过自然语言处理技术从超过三百万份课程大纲中提取了工作场所活动（DWAs），这些DWAs是按美国劳工部（DOL）的职业分类来描述的。研究的目的是为了填补高等教育中技能发展的详细记录与工作市场需求之间的空白。</p> <p>Sorry, the notebook you are looking for does not exist.</p> <p>Note that the jupyter notebook supports both light and dark themes.</p>]]></content><author><name></name></author><category term="教育"/><category term="教育,数据集,就业"/><summary type="html"><![CDATA[A national longitudinal dataset of skills taught in U.S. higher education curricula]]></summary></entry><entry><title type="html">GPU租用平台及使用介绍</title><link href="https://yangxlai.github.io/blog/2024/GPU%E7%A7%9F%E7%94%A8%E5%B9%B3%E5%8F%B0%E5%8F%8A%E4%BD%BF%E7%94%A8%E4%BB%8B%E7%BB%8D/" rel="alternate" type="text/html" title="GPU租用平台及使用介绍"/><published>2024-06-04T16:40:16+00:00</published><updated>2024-06-04T16:40:16+00:00</updated><id>https://yangxlai.github.io/blog/2024/GPU%E7%A7%9F%E7%94%A8%E5%B9%B3%E5%8F%B0%E5%8F%8A%E4%BD%BF%E7%94%A8%E4%BB%8B%E7%BB%8D</id><content type="html" xml:base="https://yangxlai.github.io/blog/2024/GPU%E7%A7%9F%E7%94%A8%E5%B9%B3%E5%8F%B0%E5%8F%8A%E4%BD%BF%E7%94%A8%E4%BB%8B%E7%BB%8D/"><![CDATA[<h1 id="一主要平台">一、主要平台</h1> <p>主要都是基于在线 jupyter notebook， 收费平台都具有在线 ssh命令行界面</p> <h2 id="11-收费">1.1 收费</h2> <p>（1） 潞晨云 <a href="https://cloud.luchentech.com/">https://cloud.luchentech.com/</a></p> <p>价格最优。</p> <p>（2） <a href="https://www.deepln.com/#/home/tabel2">https://www.deepln.com/#/home/tabel2 </a></p> <p>在读学生可 免费使用 8G P4显卡。</p> <p>（3） AutoDL <a href="https://www.autodl.com/">https://www.autodl.com/</a></p> <p>曾经价格最优， 使用的人最多， 有时租不到。</p> <h2 id="12-免费">1.2 免费</h2> <h3 id="国外">国外</h3> <p>（1） google colab <a href="https://colab.research.google.com/">https://colab.research.google.com/</a></p> <p>示例一、 <a href="https://colab.research.google.com/github/sndnyang/LearnIsFun/blob/master/educhat/TryEduchat-qwen.ipynb">https://colab.research.google.com/github/sndnyang/LearnIsFun/blob/master/educhat/TryEduchat-qwen.ipynb</a> 使用 EduChat Qwen 1.8B 模型</p> <p>示例二、 待更新</p> <p>不足： 连续运行最高不能超过12小时（即使开pro/pro+)，只能用于编写和调试代码</p> <p>（2） Kaggle <a href="https://kaggle.com/">https://kaggle.com/</a></p> <p>每周30小时免费GPU</p> <h3 id="国内">国内</h3> <p>（1）中国移动 九天毕昇 <a href="https://jiutian.10086.cn/edu/">https://jiutian.10086.cn/edu/</a></p> <p>直接在线 jupyter notebook 或 vscode开发， 可传输文件。</p> <p>缺点：很难申请到完整的一张GPU， 基本都是虚拟化后的GPU， 速度较常规慢。</p> <p>（2）OpenI 启智社区 <a href="https://openi.pcl.ac.cn/">https://openi.pcl.ac.cn/ </a></p> <p>缺点：相比别的平台， 难用， 死板， 切换配置很不方便， 调试限制4小时， 长时间训练配置麻烦。</p> <h1 id="二-主要使用流程-以潞晨云为例">二、 主要使用流程 （以潞晨云为例）</h1> <h2 id="1-注册">1. 注册</h2> <h2 id="2-登陆选卡新建主机">2. 登陆选卡新建主机</h2> <p><img src="/assets/images/market.png" alt="market"/></p> <h2 id="3-镜像默认环境选择">3. 镜像（默认环境）选择</h2> <p>选择 相应的计费方式</p> <p>点击 选择一个镜像（建议pytorch 2.1）</p> <p>充值</p> <p>创建</p> <p><img src="/assets/images/20240604-selectimg.png" alt="20240604-selectimg"/></p> <p>等待几分钟后</p> <p><img src="/assets/images/20240604-cloudins.png" alt="20240604-cloudins"/></p> <h2 id="4-配置ssh连接">4. 配置ssh连接</h2> <h3 id="41-使用jupyterlab-打开进行配置">4.1 使用jupyterLab 打开进行配置。</h3> <h3 id="42-生成密钥">4.2 生成密钥</h3> <p>私钥在个人电脑， 公钥写入服务器 <a href="https://git-scm.com/book/zh/v2/%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A%E7%9A%84-Git-%E7%94%9F%E6%88%90-SSH-%E5%85%AC%E9%92%A5">https://git-scm.com/book/zh/v2/服务器上的-Git-生成-SSH-公钥</a></p> <p>(1) 使用任意 shell (Linux环境的shell 或 windows平台安装 git bash) 查看 ~/.ssh 文件夹</p> <p>```Plain Text cd ~/.ssh ; ls</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
主要是看 `id_rsa.pub` 和 `id_rsa` 两个文件

(2) 若不存在 ， 使用 ssh-keygen 生成（ Linux shell 自带， git bash 也自带）， 示例：

```Plain Text
$ ssh-keygen -o
Generating public/private rsa key pair.
Enter file in which to save the key (/home/schacon/.ssh/id_rsa):
Created directory '/home/schacon/.ssh'.
Enter passphrase (empty for no passphrase):
Enter same passphrase again:
Your identification has been saved in /home/schacon/.ssh/id_rsa.
Your public key has been saved in /home/schacon/.ssh/id_rsa.pub.
The key fingerprint is:
d0:82:24:8e:d7:f1:bb:9b:33:53:96:93:49:da:9b:e3 schacon@mylaptop.local
</code></pre></div></div> <p>3、4行：保存的文件名，默认即可。 5、6行：个人习惯不用。</p> <p>（3）检查本地电脑生成的 <code class="language-plaintext highlighter-rouge">~/.ssh/id_rsa.pub</code> 文件 （Windows在 C:\Users\用户名.ssh）， 将该文件上传到 服务器端 id_rsa.pub （潞晨默认路径 /root/notebook/）</p> <p>（4）<code class="language-plaintext highlighter-rouge">cat /root/notebook/id_rsa.pub &gt;&gt; ~/.ssh/authorized_keys</code> 将 公钥写入系统， 以后个人电脑上有私钥， 访问服务器时就能自动登陆了。</p> <p><img src="/assets/images/20240604-uploadkey.png" alt="20240604-uploadkey"/></p> <h1 id="5-vs-code-远程开发">5 VS Code 远程开发</h1> <p>基于 remote-ssh （直接在服务器端编辑， 方便调试）， 和 基于 sftp同步（文件在本地）</p> <h2 id="51-基于remote-ssh的远程开发">5.1 基于remote-ssh的远程开发</h2> <p>(1) 搜索并安装 Remote Development</p> <p><img src="/assets/images/20240604-remdev.png" alt="20240604-remdev"/></p> <p>(2) 配置 ssh 地址 1）获取 ssh 地址 点击复制， 得到的格式大概是 ssh root@12.34.56.78 -p 910</p> <p><img src="/assets/images/20240604-sshaddr.png" alt="20240604-sshaddr"/></p> <p>2）点击添加</p> <p><img src="/assets/images/20240604-add_remote.png" alt="20240604-add_remote"/></p> <p>3）粘贴地址</p> <p><img src="/assets/images/20240604-pastesshaddr.png" alt="20240604-pastesshaddr"/></p> <p>Config 使用 主目录 （Windows下 你的用户主目录 在 C:\Users\用户名\， 同上文）</p> <p><img src="/assets/images/20240604-sshconfig.png" alt="20240604-sshconfig"/></p> <p>添加成功后会增加一行新的</p> <p><img src="/assets/images/20240604-remaddfinish.png" alt="20240604-remaddfinish"/></p> <p>4） id_rsa too open， bad permissions. (windows 可能存在 问题） <a href="https://stackoverflow.com/questions/48888365/openssh-using-private-key-on-windows-unprotected-private-key-file-error">https://stackoverflow.com/questions/48888365/openssh-using-private-key-on-windows-unprotected-private-key-file-error</a></p> <p>打开 command prompt 或 PowerShell 运行能看到报错信息</p> <p><img src="/assets/images/20240604-winkeypermit.png" alt="20240604-winkeypermit"/></p> <p>Command prompt 输入(PowerShell 略有不同，见链接）:</p> <pre><code class="language-Plaintext">cd C:\Users\用户名\.ssh
C:                                                     # command prompt的特点， 专门切换盘符
icacls .\id_rsa /inheritance:r
icacls .\id_rsa /grant:r "%username%":"(R)"
</code></pre> <p>（3）打开指定目录，即可， 潞晨云应该是 /root/notebook</p> <p><img src="/assets/images/20240604-workdir.png" alt="20240604-workdir"/></p> <p>（4） 调试 编写任意代码文件， 比如编写python文件时， （会提示）安装 Python 插件（有些网络不好， 安装老半天不成功）</p> <h2 id="52-基于-sftp同步-本地开发同步服务器">5.2 基于 sftp同步 （本地开发，同步服务器）</h2> <p>优点， 本地有代码， 缺点， 不能调试（得靠5.1的方法） —— 5.3 用pycharm， 但好像会把远程环境下载到本地（初始化很慢）， 且需要学生的教育邮箱。 打开本地项目， 安装 sftp 插件， <code class="language-plaintext highlighter-rouge">ctrl-shift-p</code> 输入 SFTP:Config， 该操作 等价于创建 .vscode/sftp.json 文件， 填写相关字段， uploadOnSave 习惯设置为True。</p> <p><img src="/assets/images/20240604-sftpsync.png" alt="20240604-sftpsync"/></p> <p><img src="/assets/images/20240604-sftpconf.png" alt="20240604-sftpconf"/></p> <p>可右键上传下载</p> <p><img src="/assets/images/20240604-sftpoper.png" alt="20240604-sftpoper"/></p> <h1 id="6-vs-code-连接-远程服务器上的-jupyter-notebook">6. VS Code 连接 远程服务器上的 Jupyter notebook</h1> <h2 id="61-打开远程jupyter-notebook">6.1 打开远程jupyter notebook</h2> <p>在5.1 配置成功后， 在VS Code中创建新的 jupyter notebook 文件，即 .ipynb文件。 初次使用时， 右上角点击 选择核心 select kernel， VS Code会自动提示是否安装插件， 选择安装Python和Jupyter， 安装成功后，即可开始使用。</p> <p><img src="/assets/images/20240604-selectkernel.png" alt="20240604-selectkernel"/></p> <h2 id="62-本地代码连接远程">6.2 本地代码连接远程</h2> <p>需要在终端运行一个新的 jupyter notebook –ip 0.0.0.0 –port 8889 –allow-root （例如）服务器上运行得到： <code class="language-plaintext highlighter-rouge">http://127.0.0.1:8889/tree?token=b6ffa4376c70f992839a1f70ca7480ddfb7e0698b50f4cce</code> 在本地电脑使用ssh命令创建隧道（如下）， 即可在浏览器直接打开进行编辑（文件在远程）或在VS Code中连接远程（代码在本地，如下图）</p> <p><code class="language-plaintext highlighter-rouge">Plain Text ssh -N -L 8889:localhost:8889 root@12.34.56.78 // 说明 本地端口：服务器地址：服务器端口 服务器用户名：IP </code></p> <p><img src="/assets/images/20240604-selectremkernel.png" alt="20240604-selectremkernel"/></p> <p><img src="/assets/images/20240604-selectjupyterserver.png" alt="20240604-selectjupyterserver"/></p> <h1 id="7-结束">7 结束</h1> <p>其他平台类似</p> <p>AutoDL 参考 https://www.autodl.com/docs/vscode/</p> <p>潞晨云参考 https://cloud.luchentech.com/doc/docs/examples/llama</p> <p>链接在 https://blog.zhimind.com/GPU-platform-usage-tutor.html <a href="https://blog.zhimind.com/GPU-platform-usage-tutor.html">GPU租用平台及使用介绍</a></p>]]></content><author><name></name></author><category term="大语言模型"/><category term="LLM,NLP"/><summary type="html"><![CDATA[列举若干GPU租用平台，并以潞晨云为例展示]]></summary></entry><entry><title type="html">EduChat 学习总结</title><link href="https://yangxlai.github.io/blog/2024/EduChat%E8%BF%90%E8%A1%8C%E6%88%90%E5%8A%9F%E6%80%BB%E7%BB%93/" rel="alternate" type="text/html" title="EduChat 学习总结"/><published>2024-06-01T16:40:16+00:00</published><updated>2024-06-01T16:40:16+00:00</updated><id>https://yangxlai.github.io/blog/2024/EduChat%E8%BF%90%E8%A1%8C%E6%88%90%E5%8A%9F%E6%80%BB%E7%BB%93</id><content type="html" xml:base="https://yangxlai.github.io/blog/2024/EduChat%E8%BF%90%E8%A1%8C%E6%88%90%E5%8A%9F%E6%80%BB%E7%BB%93/"><![CDATA[<p><a href="https://github.com/sndnyang/LearnIsFun/blob/master/educhat/educhat-baichuan.md">Github地址</a></p> <p>目前可成功运行 sft-baichuan 模型。 可按以下步骤操作：</p> <h2 id="0-下载模型的通用配置">0. 下载模型的通用配置</h2> <p>直接使用镜像网站 https://hf-mirror.com/ 所提方法二：huggingface-cli</p> <h1 id="使用训练好的模型">使用训练好的模型</h1> <h2 id="百川-baichuan-模型-13b">百川 baichuan 模型 13B</h2> <p>见 <a href="https://github.com/sndnyang/LearnIsFun/blob/master/educhat/educhat-baichuan.md">https://github.com/sndnyang/LearnIsFun/blob/master/educhat/educhat-baichuan.md</a></p> <h2 id="通义千问-qwen-模型--18b">通义千问 Qwen 模型 1.8B</h2> <p>见 <a href="https://github.com/sndnyang/LearnIsFun/blob/master/educhat/educhat-qwen.md">https://github.com/sndnyang/LearnIsFun/blob/master/educhat/educhat-qwen.md</a></p> <p>（应该无错）支持在 Colab 一键运行</p> <h2 id="llama-待学习">LLama (待学习)</h2> <p>原始权重 处理， 新手没搞过， 加上应用优先用中文的~ 不一定会再试了。</p> <h1 id="训练">训练</h1> <p>待学习</p> <h1 id="todo">TODO</h1> <ul> <li> <p>转chat, 也就是像说话一样慢慢出字， 而不是全部完成后再显示</p> </li> <li> <p>学习训练LLM， 使用所提供数据集进行训练</p> </li> <li> <p>量化（学习）</p> </li> <li> <p>接入 ollama</p> </li> <li> <p>想想怎么评估</p> </li> </ul> <h1 id="更新记录">更新记录</h1> <ul> <li>20240602 <br/> <strong>解决 百川和千问两个模型transformers版本要求不一致问题</strong> <strong>解决 educhat_gradio 对 千问模型的支持问题——就是把那一堆special tokens删了就行了</strong></li> <li>20240601 <br/> <strong>成功运行 educhat-sft-002-13b-baichuan</strong> <br/> <strong>成功运行 gradio demo</strong> <br/> <strong>晚上成功运行 qwen 1.8B 模型</strong> <br/> 花费 一天百度超级会员 2.65， 拼多多 晓黑板官方旗舰店， 下载 5个9G多文件</li> <li>202405<br/> 不成功的运行<br/> 尤其是 LLama版， 原始权重、解密初次听说， 暂无从下手， 输出代码——issue区 有人解码后也是乱码。</li> </ul>]]></content><author><name></name></author><category term="大语言模型"/><category term="LLM,NLP,教育"/><summary type="html"><![CDATA[基于开源模型的EduChat怎么运行，暂不涉及训练]]></summary></entry></feed>